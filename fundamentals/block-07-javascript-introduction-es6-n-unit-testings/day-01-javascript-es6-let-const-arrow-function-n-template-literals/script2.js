// Abaixo, vocÃª verÃ¡ algumas especificaÃ§Ãµes de algoritmos para desenvolver. Ã‰ fundamental que vocÃª utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.

//1. Crie uma funÃ§Ã£o que receba um nÃºmero e retorne seu fatorial.

// Na matemÃ¡tica, o fatorial de um nÃºmero nÃ£o negativo N, com a notaÃ§Ã£o N!, Ã© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio de forma recursiva. Spoiler: Ã‰ possÃ­vel resolver com uma linha usando ternary operator.

const factorial = (N) => {
    let result = 1;
    if (N === 0) {
        return 1;
    } else {
        for (let index = 2; index <= N; index += 1) {
            result = result *= index;
        }
        return result;
    }
}

console.log(factorial(10));

// Recursiva
// const factorials = (N) => N > 1 ? N * factorials(N - 1) : 1;
// console.log(factorials(5));

//2. Crie uma funÃ§Ã£o que receba uma frase e retorne qual a maior palavra.

const longestWord = (string) => {
    const splitWord = string.split(' ');
    let longestString = "";

    for (let index = 0; index < splitWord.length; index += 1) {
        if (splitWord[index].length > longestString.length) {
            longestString = splitWord[index];
        }
    }

    return longestString;
}

console.log(longestWord('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu')) // retorna 'aconteceu'

//In one line,

// const longestWord = string => string.split(' ').sort((wordA, wordB) => wordB.length - wordA.length)[0];

// console.log(longestWord("Antonio foi no banheiro e nÃ£o sabemos o que aconteceu"));


//3. ðŸš€ Crie uma pÃ¡gina que contenha:

//Um botÃ£o ao qual serÃ¡ associado um event listener;

//Uma variÃ¡vel clickCount no arquivo JavaScript que acumule o nÃºmero de clicks no botÃ£o;

//Um campo no HTML que vÃ¡ atualizando a quantidade de clicks no botÃ£o conforme a variÃ¡vel clickCount Ã© atualizada.

const count = document.querySelector('#count');

let clickCounter = 0;

const clickCount = document.querySelector('.click');

clickCount.addEventListener('click', () => {
    count.innerHTML = clickCounter += 1;
})

//4. ðŸš€ Crie um cÃ³digo JavaScript com a seguinte especificaÃ§Ã£o:
//NÃ£o se esqueÃ§a de usar template literals

// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que vai receber uma string como parÃ¢metro. Sua funÃ§Ã£o deverÃ¡ procurar pela letra x em uma string qualquer que vocÃª determinar e substituir pela string que vocÃª passou como parÃ¢metro. Sua funÃ§Ã£o deve retornar essa nova string.

// Exemplo:
// String determinada: "Tryber x aqui!"
// ParÃ¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"

// Um array com escopo global, que Ã© o escopo do arquivo JS, nesse caso, contendo cinco strings com suas principais skills.

// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que vai receber a string retornada da FunÃ§Ã£o 1 como parÃ¢metro. Essa funÃ§Ã£o deve concatenar as skills do array global Ã  string que foi passada para a FunÃ§Ã£o 2 via parÃ¢metro. VocÃª deve ordenar os skills em ordem alfabÃ©tica. Sua funÃ§Ã£o deve retornar essa nova string.

// Exemplo:
// "Tryber x aqui!
// Minhas cinco principais habilidades sÃ£o:
// JavaScript;
// HTML; ...
// #goTrybe".

//Copy and paste - I didn't understand a thing.

const array = ["Android", "iOS", "Architecture", "Teach", "Run"];

function buildSkillsPhrase (paramOne) {
    const fun1 = paramInner => (
      `Tryber ${paramInner} aqui!

      Tudo bem?`
    );

    let result = `${fun1(paramOne)}

    Minhas cinco principais habilidades sÃ£o:`;

    array.forEach((skill, index) =>
    result = `${result}

    - ${skill}`);

    result = `
{result}

    #goTrybe
    `;

    return result;
}

console.log(buildSkillsPhrase("Lucas"));